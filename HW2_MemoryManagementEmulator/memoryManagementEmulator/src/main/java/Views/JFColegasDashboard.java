/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Views;

import Core.Colegas;
import Core.MemoriaColegas;
import Core.ParticionColegas;
import Core.ParticionColegasAdmin;
import Core.ProcesoColegas;
import Core.ProcesoColegasAdmin;
import java.awt.Color;
import java.awt.Event;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.TitledBorder;
import javax.swing.event.MouseInputAdapter;

/**
 *
 * @author RDragon197
 */
public class JFColegasDashboard extends javax.swing.JInternalFrame {

    public int Tmemoria;
    int idProceso = 0;
    int idParticion = 0;
    int U = 0;
    int L = 0;
    int ej = 0;

    ProcesoColegasAdmin procesos = new ProcesoColegasAdmin();
    ProcesoColegas proceso = new ProcesoColegas();
    ParticionColegas particion = new ParticionColegas();
    ParticionColegasAdmin particiones = new ParticionColegasAdmin();
    MemoriaColegas memoria = new MemoriaColegas();
    Colegas colegas = new Colegas(memoria);

    /**
     * Creates new form JFColegasDashboard
     */
    public JFColegasDashboard() {
        initComponents();

    }

    public void setLabel(int Tmemoria) {
        this.U = (int) (Math.log(Tmemoria) / Math.log(2));
        this.Tmemoria = (int) Math.pow(2, U);

        this.particion.setId(0);
        this.particion.setProceso(null);
        this.particion.setTmemoria(Tmemoria);
        this.memoria.setU(U);
        this.memoria.setParticion(particion);
        this.memoria.setId(0);
        this.memoria.setTmemoria(Tmemoria);
        //vamos a asumir que ya existe una particion de tamaño Tmemoria
        this.jLabel1.setText("La memoria escogida es: " + Tmemoria + " MB");
        graficarPanel(this.jPanelMemoria, 10, 22, 430, 105, String.valueOf(Tmemoria) + " MB", Color.orange, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanelMemoria = new javax.swing.JPanel();
        jPanelProcesos = new javax.swing.JPanel();
        jComboBoxProgramas = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Segmentacion Colega Simulacion de memoria");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("¿QUE ESTA PASANDO EN MI MEMORIA?");

        jPanelMemoria.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MEMORIA", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N

        javax.swing.GroupLayout jPanelMemoriaLayout = new javax.swing.GroupLayout(jPanelMemoria);
        jPanelMemoria.setLayout(jPanelMemoriaLayout);
        jPanelMemoriaLayout.setHorizontalGroup(
            jPanelMemoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelMemoriaLayout.setVerticalGroup(
            jPanelMemoriaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 98, Short.MAX_VALUE)
        );

        jPanelProcesos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PROCESOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12))); // NOI18N
        jPanelProcesos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelProcesosMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelProcesosLayout = new javax.swing.GroupLayout(jPanelProcesos);
        jPanelProcesos.setLayout(jPanelProcesosLayout);
        jPanelProcesosLayout.setHorizontalGroup(
            jPanelProcesosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 122, Short.MAX_VALUE)
        );
        jPanelProcesosLayout.setVerticalGroup(
            jPanelProcesosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );

        jComboBoxProgramas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBoxProgramas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GOOGLE CHROME", "PUBG", "NETFLIX DESKTOP", "WORD", "EXCEL" }));

        jButton1.setText("CORRER");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("MB");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("JLABEL");

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("###0"))));
        jFormattedTextField1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jFormattedTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jFormattedTextField1MouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("SELECCIONE UN PROGRAMA Y ASIGNE LA MEMORIA A UTILIZAR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelMemoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBoxProgramas, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addGap(0, 22, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelProcesos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jPanelProcesos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jPanelMemoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBoxProgramas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(15, 15, 15)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        this.jPanelMemoria.removeAll();
        this.jPanelProcesos.removeAll();
        ProcesoColegas proceso = new ProcesoColegas();
        int tmPrograma = Integer.valueOf(this.jFormattedTextField1.getText());
        proceso.setId(idProceso++);
        proceso.setNombre(this.jComboBoxProgramas.getSelectedItem().toString());
        proceso.setTamaño(tmPrograma);

        if (ej == 0) {
            this.colegas.primeraEjecucion(tmPrograma, proceso);
            ej++;
        } else {
            this.colegas.nEjecucion(tmPrograma, proceso);
        }

        this.procesos.agregarProceso(proceso);

        int x = 0;
        for (int i = 0; i < this.memoria.getParticiones().size(); i++) {
            graficarPanel(jPanelMemoria, x + 15, 20, getPixelesDeParticion((float) this.memoria.getParticion(i).getTmemoria(), (float) this.memoria.getTmemoria(), this.jPanelMemoria.getSize().width), 105, String.valueOf(this.memoria.getParticion(i).getTmemoria()) + "MB", (this.memoria.getParticion(i).ispExiste()) ? Color.green : Color.GRAY, false);
            x = x + getPixelesDeParticion(this.memoria.getParticion(i).getTmemoria(), this.memoria.getTmemoria(), this.jPanelMemoria.getWidth());
        }

        if (!proceso.isCorriendo()) {
            JOptionPane.showMessageDialog(rootPane, "No hay memoria disponible para el proceso:'" + proceso.getNombre() + "' Puesto en espera");
        }
        int y = 20;
        for (ProcesoColegas proceso1 : this.procesos.getProcesos()) {
            graficarPanelProcesos(jPanelProcesos, 12, y, this.jPanelProcesos.getSize().width - 20, 70, proceso1.getNombre(), proceso1.getColor(), String.valueOf(proceso1.getId()));
            y = y + 66;
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    public void graficarPanel(JPanel thisPanel, int x, int y, int width, int heigth, String nameProgram, Color color, boolean frack) {
        JPanel jParticion = new JPanel();
        JPanel jPFrack = new JPanel();
        jParticion.setSize(width, heigth);
        jParticion.setLocation(x, y);
        jParticion.setBorder(new TitledBorder(nameProgram));
        jParticion.setBackground(color);

        jPFrack.setBackground(Color.red);
        jPFrack.setSize(50, 50);
        jPFrack.setLocation(jParticion.getLocation().x + 44, jParticion.getLocation().y + 40);
        //jParticion.add(jPFrack);

        if (frack) {
            thisPanel.add(jPFrack);
        }
        thisPanel.add(jParticion);
        thisPanel.revalidate();
        thisPanel.repaint();

    }

    public void graficarPanelProcesos(JPanel thisPanel, int x, int y, int width, int heigth, String nameProgram, Color color, String id) {
        JPanel jParticion = new JPanel();
        jParticion.setSize(width, heigth);
        jParticion.setLocation(x, y);
        jParticion.setBorder(new TitledBorder(nameProgram));
        jParticion.setBackground(color);

        JButton btn = new JButton();
        btn.setVisible(true);
        btn.setText("Eliminar");
        btn.setName(id);
        btn.setHorizontalAlignment((int) LEFT_ALIGNMENT);
        btn.setVerticalAlignment((int) CENTER_ALIGNMENT);
        btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                int opcion = JOptionPane.showConfirmDialog(null, "¿ESTA SEGURO QUE DESEA FINALIZAR ESTE PROCESO?",
                        procesos.getProceso(Integer.valueOf(btn.getName())).getNombre(), JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.INFORMATION_MESSAGE);

                if (opcion == 0) {
                    if (eliminarProceso(Integer.valueOf(btn.getName()))) {
                        JOptionPane.showMessageDialog(rootPane, "Se elimino el proceso correctamente :)");

                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Error al eliminar proceso");

                    }
                }

            }
        });

        jParticion.add(btn);
        thisPanel.add(jParticion);
        thisPanel.revalidate();
        thisPanel.repaint();

    }

    public int getPixelesDeParticion(float TPrograma, float TMemoria, int parPanel) {
        //JOptionPane.showMessageDialog(rootPane, "Tprograma:" + TPrograma + "TMemoria:" + TMemoria);
        float resultado = (float) (TPrograma / TMemoria) * parPanel;
        //JOptionPane.showMessageDialog(rootPane, "Resultado pixeles:" + resultado);
        return (int) Math.round(resultado);
    }

    public boolean eliminarProceso(int id) {
        boolean status = false;
        if (this.procesos.getProceso(id).isCorriendo()) {

            ParticionColegas par = new ParticionColegas();
            par = this.colegas.buscarPArticionProceso(id);

            if (this.colegas.buscarColegaIndex(par) != -1) {
                if (!this.colegas.getMemoria().getParticion(this.colegas.buscarColegaIndex(par)).ispExiste()) {
                    ParticionColegas npar = new ParticionColegas();
                    npar.setId(id);
                    npar.setIdHder(id + 1);
                    npar.setProceso(null);
                    npar.setTmemoria(par.getTmemoria() * 2);
                    npar.setpExiste(false);

                    int index = this.colegas.buscarColegaIndex(par);
                    int indexProceso = this.colegas.buscarParIndexProceso(par, id);
                    this.colegas.getMemoria().remplazePartition(indexProceso, npar);
                    this.colegas.getMemoria().getParticiones().remove(index);
                    this.procesos.getProcesos().remove(id);

                    status = true;
                }

            }

        } else {
            //como el proceso no esta en la memoria no hay que tocar las particiones
            JOptionPane.showMessageDialog(rootPane, "Se elimino el proceso en espera");
            this.procesos.getProcesos().remove(id);
            this.memoria.getProcesos().remove(id);
            status = true;

        }

        if (status) {
            graficar();
        }

        return status;
    }

    private void jFormattedTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jFormattedTextField1MouseClicked

    }//GEN-LAST:event_jFormattedTextField1MouseClicked

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        jPanelMemoria.removeAll();
        jPanelProcesos.removeAll();
        int x = 0;
        for (int i = 0; i < this.memoria.getParticiones().size(); i++) {
            graficarPanel(jPanelMemoria, x + 15, 20, getPixelesDeParticion((float) this.memoria.getParticion(i).getTmemoria(), (float) this.memoria.getTmemoria(), this.jPanelMemoria.getSize().width), 105, String.valueOf(this.memoria.getParticion(i).getTmemoria()) + "MB", (this.memoria.getParticion(i).ispExiste()) ? Color.green : Color.GRAY, false);
            x = x + getPixelesDeParticion(this.memoria.getParticion(i).getTmemoria(), this.memoria.getTmemoria(), this.jPanelMemoria.getWidth());

        }

        int y = 20;
        for (ProcesoColegas proceso1 : this.procesos.getProcesos()) {
            graficarPanelProcesos(jPanelProcesos, 12, y, this.jPanelProcesos.getSize().width - 20, 70, proceso1.getNombre(), proceso1.getColor(), String.valueOf(proceso1.getId()));
            y = y + 66;
        }
    }//GEN-LAST:event_formComponentResized

    private void jPanelProcesosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelProcesosMouseClicked
//        JOptionPane.showMessageDialog(rootPane, "Hola mundo");
    }//GEN-LAST:event_jPanelProcesosMouseClicked

    @Override
    public boolean action(Event evt, Object what) {
        return super.action(evt, what); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBoxProgramas;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanelMemoria;
    private javax.swing.JPanel jPanelProcesos;
    // End of variables declaration//GEN-END:variables

    public void graficar() {
        jPanelMemoria.removeAll();
        jPanelProcesos.removeAll();
        int x = 0;
        for (int i = 0; i < this.memoria.getParticiones().size(); i++) {
            graficarPanel(jPanelMemoria, x + 15, 20, getPixelesDeParticion((float) this.memoria.getParticion(i).getTmemoria(), (float) this.memoria.getTmemoria(), this.jPanelMemoria.getSize().width), 105, String.valueOf(this.memoria.getParticion(i).getTmemoria()) + "MB", (this.memoria.getParticion(i).ispExiste()) ? Color.green : Color.GRAY, false);
            x = x + getPixelesDeParticion(this.memoria.getParticion(i).getTmemoria(), this.memoria.getTmemoria(), this.jPanelMemoria.getWidth());
            
        }

        int y = 20;
        for (ProcesoColegas proceso1 : this.procesos.getProcesos()) {
            graficarPanelProcesos(jPanelProcesos, 12, y, this.jPanelProcesos.getSize().width - 20, 70, proceso1.getNombre(), proceso1.getColor(), String.valueOf(proceso1.getId()));
            y = y + 66;
        }
    }
}
